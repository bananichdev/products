# type: ignore
"""provided_maintenance_associations

Revision ID: 7a2008f64b7c
Revises: 2fd772137e82
Create Date: 2025-07-27 14:52:28.248388+03:00

"""

from __future__ import annotations

import warnings

import sqlalchemy as sa
from advanced_alchemy.types import GUID, ORA_JSONB, DateTimeUTC, EncryptedString, EncryptedText
from alembic import op
from sqlalchemy import Text  # noqa: F401

__all__ = ["data_downgrades", "data_upgrades", "downgrade", "schema_downgrades", "schema_upgrades", "upgrade"]

sa.GUID = GUID
sa.DateTimeUTC = DateTimeUTC
sa.ORA_JSONB = ORA_JSONB
sa.EncryptedString = EncryptedString
sa.EncryptedText = EncryptedText

# revision identifiers, used by Alembic.
revision = "7a2008f64b7c"
down_revision = "2fd772137e82"
branch_labels = None
depends_on = None


def upgrade() -> None:
    with warnings.catch_warnings():
        warnings.filterwarnings("ignore", category=UserWarning)
        with op.get_context().autocommit_block():
            schema_upgrades()
            data_upgrades()


def downgrade() -> None:
    with warnings.catch_warnings():
        warnings.filterwarnings("ignore", category=UserWarning)
        with op.get_context().autocommit_block():
            data_downgrades()
            schema_downgrades()


def schema_upgrades() -> None:
    """schema upgrade migrations go here."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "provided_maintenance_country_association",
        sa.Column("provided_maintenance_id", sa.GUID(length=16), nullable=False),
        sa.Column("country_id", sa.SmallInteger(), nullable=False),
        sa.ForeignKeyConstraint(
            ["country_id"],
            ["countries.country_id"],
            name=op.f("fk_provided_maintenance_country_association_country_id_countries"),
        ),
        sa.ForeignKeyConstraint(
            ["provided_maintenance_id"],
            ["provided_maintenance.provided_maintenance_id"],
            name=op.f("fk_provided_maintenance_country_association_provided_maintenance_id_provided_maintenance"),
        ),
        sa.PrimaryKeyConstraint(
            "provided_maintenance_id", "country_id", name=op.f("pk_provided_maintenance_country_association")
        ),
    )
    op.create_table(
        "provided_maintenance_vehicle_brand_association",
        sa.Column("provided_maintenance_id", sa.GUID(length=16), nullable=False),
        sa.Column("vehicle_brand_id", sa.SmallInteger(), nullable=False),
        sa.ForeignKeyConstraint(
            ["provided_maintenance_id"],
            ["provided_maintenance.provided_maintenance_id"],
            name=op.f("fk_provided_maintenance_vehicle_brand_association_provided_maintenance_id_provided_maintenance"),
        ),
        sa.ForeignKeyConstraint(
            ["vehicle_brand_id"],
            ["vehicle_brands.vehicle_brand_id"],
            name=op.f("fk_provided_maintenance_vehicle_brand_association_vehicle_brand_id_vehicle_brands"),
        ),
        sa.PrimaryKeyConstraint(
            "provided_maintenance_id",
            "vehicle_brand_id",
            name=op.f("pk_provided_maintenance_vehicle_brand_association"),
        ),
    )
    # ### end Alembic commands ###


def schema_downgrades() -> None:
    """schema downgrade migrations go here."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("provided_maintenance_vehicle_brand_association")
    op.drop_table("provided_maintenance_country_association")
    # ### end Alembic commands ###


def data_upgrades() -> None:
    """Add any optional data upgrade migrations here!"""


def data_downgrades() -> None:
    """Add any optional data downgrade migrations here!"""
