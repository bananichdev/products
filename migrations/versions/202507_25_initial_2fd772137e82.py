# type: ignore
"""initial

Revision ID: 2fd772137e82
Revises:
Create Date: 2025-07-25 16:39:32.136054+03:00

"""

from __future__ import annotations

import warnings

import sqlalchemy as sa
from advanced_alchemy.types import GUID, ORA_JSONB, DateTimeUTC, EncryptedString, EncryptedText
from alembic import op
from sqlalchemy import Text  # noqa: F401
from sqlalchemy.dialects import postgresql

from migrations.utils import clear_table, insert_json_data

__all__ = ["data_downgrades", "data_upgrades", "downgrade", "schema_downgrades", "schema_upgrades", "upgrade"]

sa.GUID = GUID
sa.DateTimeUTC = DateTimeUTC
sa.ORA_JSONB = ORA_JSONB
sa.EncryptedString = EncryptedString
sa.EncryptedText = EncryptedText

# revision identifiers, used by Alembic.
revision = "2fd772137e82"
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    with warnings.catch_warnings():
        warnings.filterwarnings("ignore", category=UserWarning)
        with op.get_context().autocommit_block():
            schema_upgrades()
            data_upgrades()


def downgrade() -> None:
    with warnings.catch_warnings():
        warnings.filterwarnings("ignore", category=UserWarning)
        with op.get_context().autocommit_block():
            data_downgrades()
            schema_downgrades()


def schema_upgrades() -> None:
    """schema upgrade migrations go here."""
    # ### commands auto generated by Alembic - please adjust! ###
    sa.Enum("autoservice:manage", name="autoserviceuserpermissions").create(op.get_bind())
    op.create_table(
        "autoservices",
        sa.Column("autoservice_id", sa.GUID(length=16), nullable=False),
        sa.Column("name", sa.String(length=150), nullable=False),
        sa.Column("description", sa.String(length=1500), nullable=True),
        sa.Column("itn", sa.String(length=12), nullable=False),
        sa.Column("psrn", sa.String(length=13), nullable=False),
        sa.Column("address", sa.String(length=500), nullable=False),
        sa.Column("lon", sa.REAL(), nullable=True),
        sa.Column("lat", sa.REAL(), nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.PrimaryKeyConstraint("autoservice_id", name=op.f("pk_autoservices")),
    )
    op.create_table(
        "countries",
        sa.Column("country_id", sa.SmallInteger(), autoincrement=True, nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("country_id", name=op.f("pk_countries")),
        sa.UniqueConstraint("name"),
        sa.UniqueConstraint("name", name=op.f("uq_countries_name")),
    )
    op.create_table(
        "customers",
        sa.Column("customer_id", sa.GUID(length=16), nullable=False),
        sa.Column("name", sa.String(length=150), nullable=False),
        sa.Column("city", sa.String(length=200), nullable=True),
        sa.Column("uid", sa.GUID(length=16), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.PrimaryKeyConstraint("customer_id", name=op.f("pk_customers")),
    )
    with op.batch_alter_table("customers", schema=None) as batch_op:
        batch_op.create_index(batch_op.f("ix_customers_uid"), ["uid"], unique=True)

    op.create_table(
        "mechanics",
        sa.Column("mechanic_id", sa.GUID(length=16), nullable=False),
        sa.Column("name", sa.String(length=150), nullable=False),
        sa.Column("description", sa.String(length=1500), nullable=True),
        sa.Column("city", sa.String(length=200), nullable=False),
        sa.Column("address", sa.String(length=500), nullable=True),
        sa.Column("lon", sa.REAL(), nullable=True),
        sa.Column("lat", sa.REAL(), nullable=True),
        sa.Column("private", sa.Boolean(), nullable=False),
        sa.Column("mobile", sa.Boolean(), nullable=False),
        sa.Column("uid", sa.GUID(length=16), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.PrimaryKeyConstraint("mechanic_id", name=op.f("pk_mechanics")),
    )
    with op.batch_alter_table("mechanics", schema=None) as batch_op:
        batch_op.create_index(batch_op.f("ix_mechanics_uid"), ["uid"], unique=True)

    op.create_table(
        "provided_maintenance_categories",
        sa.Column("provided_maintenance_category_id", sa.SmallInteger(), autoincrement=True, nullable=False),
        sa.Column("name", sa.String(length=100), nullable=False),
        sa.PrimaryKeyConstraint("provided_maintenance_category_id", name=op.f("pk_provided_maintenance_categories")),
        sa.UniqueConstraint("name"),
        sa.UniqueConstraint("name", name=op.f("uq_provided_maintenance_categories_name")),
    )
    op.create_table(
        "autoservice_users",
        sa.Column("uid", sa.GUID(length=16), nullable=False),
        sa.Column("autoservice_id", sa.GUID(length=16), nullable=False),
        sa.Column(
            "permissions",
            sa.ARRAY(postgresql.ENUM("autoservice:manage", name="autoserviceuserpermissions", create_type=False)),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["autoservice_id"],
            ["autoservices.autoservice_id"],
            name=op.f("fk_autoservice_users_autoservice_id_autoservices"),
        ),
        sa.PrimaryKeyConstraint("uid", "autoservice_id", name=op.f("pk_autoservice_users")),
    )
    op.create_table(
        "mechanic_autoservice_association",
        sa.Column("mechanic_id", sa.GUID(length=16), nullable=False),
        sa.Column("autoservice_id", sa.GUID(length=16), nullable=False),
        sa.ForeignKeyConstraint(
            ["autoservice_id"],
            ["autoservices.autoservice_id"],
            name=op.f("fk_mechanic_autoservice_association_autoservice_id_autoservices"),
        ),
        sa.ForeignKeyConstraint(
            ["mechanic_id"],
            ["mechanics.mechanic_id"],
            name=op.f("fk_mechanic_autoservice_association_mechanic_id_mechanics"),
        ),
        sa.PrimaryKeyConstraint("mechanic_id", "autoservice_id", name=op.f("pk_mechanic_autoservice_association")),
    )
    op.create_table(
        "provided_maintenance_types",
        sa.Column("provided_maintenance_type_id", sa.SmallInteger(), autoincrement=True, nullable=False),
        sa.Column("name", sa.String(length=200), nullable=False),
        sa.Column("provided_maintenance_category_id", sa.SmallInteger(), nullable=False),
        sa.ForeignKeyConstraint(
            ["provided_maintenance_category_id"],
            ["provided_maintenance_categories.provided_maintenance_category_id"],
            name=op.f("fk_provided_maintenance_types_provided_maintenance_category_id_provided_maintenance_categories"),
        ),
        sa.PrimaryKeyConstraint("provided_maintenance_type_id", name=op.f("pk_provided_maintenance_types")),
        sa.UniqueConstraint("name"),
        sa.UniqueConstraint("name", name=op.f("uq_provided_maintenance_types_name")),
    )
    op.create_table(
        "vehicle_brands",
        sa.Column("vehicle_brand_id", sa.SmallInteger(), autoincrement=True, nullable=False),
        sa.Column("name", sa.String(length=100), nullable=False),
        sa.Column("popular", sa.Boolean(), nullable=False),
        sa.Column("country_id", sa.SmallInteger(), nullable=False),
        sa.ForeignKeyConstraint(
            ["country_id"], ["countries.country_id"], name=op.f("fk_vehicle_brands_country_id_countries")
        ),
        sa.PrimaryKeyConstraint("vehicle_brand_id", name=op.f("pk_vehicle_brands")),
        sa.UniqueConstraint("name"),
        sa.UniqueConstraint("name", name=op.f("uq_vehicle_brands_name")),
    )
    op.create_table(
        "provided_maintenance",
        sa.Column("provided_maintenance_id", sa.GUID(length=16), nullable=False),
        sa.Column("price", sa.Numeric(precision=10, scale=2), nullable=False),
        sa.Column("description", sa.String(length=500), nullable=True),
        sa.Column("provided_maintenance_type_id", sa.SmallInteger(), nullable=False),
        sa.Column("mechanic_id", sa.GUID(length=16), nullable=True),
        sa.Column("autoservice_id", sa.GUID(length=16), nullable=True),
        sa.CheckConstraint(
            "mechanic_id IS NOT NULL OR autoservice_id IS NOT NULL",
            name=op.f("ck_provided_maintenance_check_mechanic_or_autoservice"),
        ),
        sa.ForeignKeyConstraint(
            ["autoservice_id"],
            ["autoservices.autoservice_id"],
            name=op.f("fk_provided_maintenance_autoservice_id_autoservices"),
        ),
        sa.ForeignKeyConstraint(
            ["mechanic_id"], ["mechanics.mechanic_id"], name=op.f("fk_provided_maintenance_mechanic_id_mechanics")
        ),
        sa.ForeignKeyConstraint(
            ["provided_maintenance_type_id"],
            ["provided_maintenance_types.provided_maintenance_type_id"],
            name=op.f("fk_provided_maintenance_provided_maintenance_type_id_provided_maintenance_types"),
        ),
        sa.PrimaryKeyConstraint("provided_maintenance_id", name=op.f("pk_provided_maintenance")),
    )
    op.create_table(
        "vehicle_models",
        sa.Column("vehicle_model_id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("name", sa.String(length=200), nullable=False),
        sa.Column("vehicle_brand_id", sa.SmallInteger(), nullable=False),
        sa.ForeignKeyConstraint(
            ["vehicle_brand_id"],
            ["vehicle_brands.vehicle_brand_id"],
            name=op.f("fk_vehicle_models_vehicle_brand_id_vehicle_brands"),
        ),
        sa.PrimaryKeyConstraint("vehicle_model_id", name=op.f("pk_vehicle_models")),
    )
    op.create_table(
        "vehicle_generations",
        sa.Column("vehicle_generation_id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("name", sa.String(length=200), nullable=False),
        sa.Column("start_year_production", sa.SmallInteger(), nullable=False),
        sa.Column("end_year_production", sa.SmallInteger(), nullable=True),
        sa.Column("vehicle_model_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["vehicle_model_id"],
            ["vehicle_models.vehicle_model_id"],
            name=op.f("fk_vehicle_generations_vehicle_model_id_vehicle_models"),
        ),
        sa.PrimaryKeyConstraint("vehicle_generation_id", name=op.f("pk_vehicle_generations")),
    )
    op.create_table(
        "vehicles",
        sa.Column("vehicle_id", sa.GUID(length=16), nullable=False),
        sa.Column("state_number", sa.String(length=12), nullable=True),
        sa.Column("vin", sa.String(length=17), nullable=True),
        sa.Column("vehicle_brand_id", sa.SmallInteger(), nullable=False),
        sa.Column("vehicle_model_id", sa.Integer(), nullable=False),
        sa.Column("vehicle_generation_id", sa.Integer(), nullable=False),
        sa.Column("customer_id", sa.GUID(length=16), nullable=False),
        sa.ForeignKeyConstraint(
            ["customer_id"], ["customers.customer_id"], name=op.f("fk_vehicles_customer_id_customers")
        ),
        sa.ForeignKeyConstraint(
            ["vehicle_brand_id"],
            ["vehicle_brands.vehicle_brand_id"],
            name=op.f("fk_vehicles_vehicle_brand_id_vehicle_brands"),
        ),
        sa.ForeignKeyConstraint(
            ["vehicle_generation_id"],
            ["vehicle_generations.vehicle_generation_id"],
            name=op.f("fk_vehicles_vehicle_generation_id_vehicle_generations"),
        ),
        sa.ForeignKeyConstraint(
            ["vehicle_model_id"],
            ["vehicle_models.vehicle_model_id"],
            name=op.f("fk_vehicles_vehicle_model_id_vehicle_models"),
        ),
        sa.PrimaryKeyConstraint("vehicle_id", name=op.f("pk_vehicles")),
        sa.UniqueConstraint("vin"),
        sa.UniqueConstraint("vin", name=op.f("uq_vehicles_vin")),
    )
    # ### end Alembic commands ###


def schema_downgrades() -> None:
    """schema downgrade migrations go here."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("vehicles")
    op.drop_table("vehicle_generations")
    op.drop_table("vehicle_models")
    op.drop_table("provided_maintenance")
    op.drop_table("vehicle_brands")
    op.drop_table("provided_maintenance_types")
    op.drop_table("mechanic_autoservice_association")
    op.drop_table("autoservice_users")
    op.drop_table("provided_maintenance_categories")
    with op.batch_alter_table("mechanics", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_mechanics_uid"))

    op.drop_table("mechanics")
    with op.batch_alter_table("customers", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_customers_uid"))

    op.drop_table("customers")
    op.drop_table("countries")
    op.drop_table("autoservices")
    sa.Enum("autoservice:manage", name="autoserviceuserpermissions").drop(op.get_bind())
    # ### end Alembic commands ###


def data_upgrades() -> None:
    """Add any optional data upgrade migrations here!"""
    insert_json_data(
        directory="maintenance",
        file_name="provided_maintenance_categories.json",
        table_name="provided_maintenance_categories",
        columns=[
            sa.column("provided_maintenance_category_id", sa.SmallInteger()),
            sa.column("name", sa.String(length=100)),
        ],
    )

    insert_json_data(
        directory="maintenance",
        file_name="provided_maintenance_types.json",
        table_name="provided_maintenance_types",
        columns=[
            sa.column("provided_maintenance_type_id", sa.SmallInteger()),
            sa.column("name", sa.String(length=200)),
            sa.column("provided_maintenance_category_id", sa.SmallInteger()),
        ],
    )

    insert_json_data(
        directory="countries",
        file_name="countries.json",
        table_name="countries",
        columns=[sa.column("country_id", sa.SmallInteger()), sa.column("name", sa.String())],
    )

    insert_json_data(
        directory="vehicles",
        file_name="vehicle_brands.json",
        table_name="vehicle_brands",
        columns=[
            sa.Column("vehicle_brand_id", sa.SmallInteger()),
            sa.column("name", sa.String(length=100)),
            sa.Column("popular", sa.Boolean()),
            sa.column("country_id", sa.SmallInteger()),
        ],
    )
    insert_json_data(
        directory="vehicles",
        file_name="vehicle_models.json",
        table_name="vehicle_models",
        columns=[
            sa.Column("vehicle_model_id", sa.SmallInteger()),
            sa.column("name", sa.String(length=200)),
            sa.Column("vehicle_brand_id", sa.SmallInteger()),
        ],
    )
    insert_json_data(
        directory="vehicles",
        file_name="vehicle_generations.json",
        table_name="vehicle_generations",
        columns=[
            sa.Column("vehicle_generation_id", sa.Integer()),
            sa.column("name", sa.String(length=200)),
            sa.Column("start_year_production", sa.SmallInteger(), nullable=False),
            sa.Column("end_year_production", sa.SmallInteger(), nullable=True),
            sa.Column("vehicle_model_id", sa.SmallInteger()),
        ],
    )


def data_downgrades() -> None:
    """Add any optional data downgrade migrations here!"""
    clear_table(table_name="provided_maintenance_types")
    clear_table(table_name="provided_maintenance_categories")
    clear_table(table_name="countries")
    clear_table(table_name="vehicle_generations")
    clear_table(table_name="vehicle_models")
    clear_table(table_name="vehicle_brands")
